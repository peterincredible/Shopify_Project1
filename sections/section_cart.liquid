<div>
    <div class=" flex justify-between">
        <h2 class="cart_header_h2">Your Cart</h2>
        <a href="{{routes.collections_url}}/all">Continue Shopping</a>
    </div>
    <div class="cart_header cart_header_font">
        <p class="cart_header_product_item">Product</p>
        <p class="cart_header_quantity_item">Qantity</p>
        <p class="cart_header_total_item">Total</p>
    </div>
    <form action="{{ routes.cart_url }}" method="post">
        {% for item in cart.items %}
            <div x-data="cart_item" data-test="{{item.title}}" class="cart_main_wrapper">
                <div class="cart_product_img">
                     <div class="cart_product_img_wrapper">
                        <img src="{{item.product | img_url: 'large' }}" alt="cant display image" class="product_img"/>
                     </div>
                </div>

                <div class="cart_product_detail">
                        <div class="cart_product_description">
                                <p class="cart_product_title">{{item.product.title}}</p>
                                {% for selected_variant in item.options_with_values %}
                                        {% comment %} {{selected_variant | json}} {% endcomment %}
                                    <p class="cart_selected_variant"><span>{{selected_variant.name}}</span>:<span>{{selected_variant.value}}</span></p>
                                {% endfor %}
                        </div>
                        <div class="cart_product_quantity">
                            <div class="quantity_controller_wrapper">
                            <button class="qantity_control_btn" @click.prevent="addQuantity">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                            <input type="text" name="quantity" min="1" name="updates[]" value="{{item.quantity}}"   class="qantity_input">
                            {% comment %} <span ></span> {% endcomment %}
                            <button  class="qantity_control_btn" @click.prevent="subQuantity">
                                <i class="fa-solid fa-minus"></i>
                            </button>
                            </div>
                            <a href="{{ item.url_to_remove }}" style="margin-top: 10px;"><i class="fa-solid fa-trash"></i></a>   
                        </div>
                </div>
                
               
                <div class="cart_total">
                    <i x-show.important="showLoader" class="fa-solid fa-rotate-right fa-spin"></i>
                    <span x-show.important="!showLoader" class="price_data" data-price="{{item.product.price | money}}">{{item.original_price | money}}</span>
                </div>

                </div>
                {% comment %} <template x-show="showLoader"> {% endcomment %}
                    
                {% comment %} </template> {% endcomment %}
                {% comment %} <template x-show="!showLoader"> {% endcomment %}
                    
                {% comment %} </template> {% endcomment %}
                
            {% comment %} {{item |  json}} {% endcomment %}
            <!-- line item info -->
        {% endfor %}
         <div x-data="totalSum" class="checkout_btn_container">
            {% comment %} <p  x-ref="total_p" @reload_cart_total.window="getSum">{{cart.total_price |  money}}</p> {% endcomment %}
            <div>

                <p>
                    <span class=" total_estimate_placeholder mr-4">Estimated total</span>
                    <span x-ref="total_p" @reload_cart_total.window="getSum" class="cart_total_amount">{{cart.total_price |  money}}</span>
                </p>
                
                <input type="submit" name="checkout" class="checkout_btn" value="Check out">

            </div>
         </div>
        
    </form>
</div>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('cart_item', () => ({
            quantity_input_element:null,
            add_quantity_element:null,
            sub_quantity_element:null,
            priceMoneyPrefix:"",
            price:0,
            price_data:null,
            showLoader:false,
            init(){
                this.quantity_input_element = this.$el.querySelector(".qantity_input");
                this.price_data = this.$el.querySelector(".price_data");
                let temp = this.price_data.dataset.price
                temp = temp.slice(1,temp.length);
                this.price = parseFloat(temp);
                this.priceMoneyPrefix = this.price_data.innerText[0];
                let quantity = this.quantity_input_element.value;
                let value = `${this.priceMoneyPrefix}${this.price * quantity}`;
                this.price_data.innerText = value;

                // console.log(this.quantity_input_element.value);
                // console.log(this.$el.dataset.test);
            },
            addQuantity(){
                 let quantity = parseInt(this.quantity_input_element.value)
                 quantity +=1;
                 this.quantity_input_element.value=quantity;
                 let value = `${this.priceMoneyPrefix}${this.price * quantity}`;
                 this.showLoader=true;
                 setTimeout(()=>{
                    this.price_data.innerText = value;
                    this.showLoader=false;
                    this.$dispatch("reload_cart_total",this.priceMoneyPrefix);
                 },"500")
                //  console.log(value);
                //  this.price_data.innerText = `${this.priceMoneyPrefix} ${this.price * quantity}`;
            },
            subQuantity(){
                let quantity = parseInt(this.quantity_input_element.value);
                 quantity -=1;
                 if(quantity <= 0){
                    quantity = 1;
                 }
                 this.quantity_input_element.value=quantity;
                 let value = `${this.priceMoneyPrefix}${this.price * quantity}`;
                 this.showLoader=true;
                 setTimeout(()=>{
                    
                    this.price_data.innerText = value;
                    this.showLoader=false;
                    this.$dispatch("reload_cart_total",this.priceMoneyPrefix);
                 },"500")

                //  console.log(value);
                 
            },
        }))

        Alpine.data('totalSum',()=>({
            commafy(data){
                return data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            },
            getSum(e){
                //parseFloat('100,000.00'.replace(/,/g, ''))
                let price_datas = document.querySelectorAll('.price_data');
                let price_holder_total = 0
                // let prices =  temp = temp.slice(1,temp.length);
                // this.price = parseFloat(temp);
                for(let price_data of price_datas){
                    let temp = price_data.innerText;
                    let price = temp.slice(1,temp.length);
                    price = parseFloat(price.replace(/,/g,''));
                    price_holder_total +=price;
                    // console.log(price);
                }
                // console.dir(price_data)
                let element = this.$refs.total_p;
                element.innerText=`${e.detail}${this.commafy(price_holder_total)}`;
                console.log(this);
                
            }
        }))
    })
</script>
{% schema %}
{
    "name": "CartSchema",
    "class": "cart_section_class",
    "settings": [
        
        ]
}
{% endschema %}